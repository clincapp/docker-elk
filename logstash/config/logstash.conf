input {

# Listen for gelf-formatted logs on port 6010 (Rails Server - Puma)
  gelf {
    type => rails_server
    port => 6010
  }

  # Listen for gelf-formatted logs on port 6020 (Python worker.py)
  gelf {
    type => smartrate_worker
    port => 6020
  }

# Look for logs in volume.
  file {
  	type => file_log
  	# Define location of log files.
  	path => "/etc/logstash/logging/*.log"
  	# Time interval (seconds) for querying files to check for updates. Default is 1.
  	stat_interval => 1
  }
}
 
filter {

  # If [program] entry contains "docker/", add a new field with extracted "container_id" and replace [program] with "docker".
  if "docker/" in [program] {
    mutate {
      add_field => {
        "container_id" => "%{program}"
      }
    }
    # 
    mutate {
      gsub => ["container_id", "docker/", ""]
    }
    mutate {
      update => ["program", "docker"]
    }
  }

  # Parse [message] entry in rails_server log.
  if [type] == "rails_server" {
    grok{
	  match => { "message" => "\[%{TIMESTAMP_ISO8601:created_time} %{NOTSPACE:created_timezone}\] *%{LOGLEVEL:severity} *-* *:* *%{GREEDYDATA:tempdata}" }
    }
    # Match '{}' at start and end of line.
    if [tempdata] =~ /^{.*}$/ {
  	    # Parse message using json filter.
        json { source => tempdata }
        # Remove temporary field.
        mutate{
          remove_field => tempdata
        }
    }
  }

  # Parse [message] entry in smartrate_worker log.
  if [type] == "smartrate_worker" {
    # "message" contains additional data which we must extract.
    # Require a conditional on the input type here?
    mutate {
  	    # Extract message.
        replace => ["message", "%{message}"]
        # Remove newlines.
        gsub => ['message', '\n', '']
    }
    # Regex: Match '{}' at start and end of line, and match all other characters except for line terminators.
    if [message] =~ /^{.*}$/ {
  	    # Parse message using json filter.
        json { source => message }
    }
    # Convert "created" from UNIX date format.
    date {
      match => [ "created","UNIX" ]
      target => "created"
    }
  }

  if [type] == "file_log" {
    grok{
	    match => { "message" => "\[%{TIMESTAMP_ISO8601:created_time} %{NOTSPACE:created_timezone}\] *%{LOGLEVEL:severity} *-* *:* *%{GREEDYDATA:tempdata}" }
    }
    mutate {
      update => ["message","%{tempdata}"]
      remove_field => tempdata
    }
    grok {
      match => ["path","%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"]
    }
  }
}

output {
	stdout {
		codec => rubydebug
	}
	elasticsearch {
		hosts => "elasticsearch:9200"
	}
}